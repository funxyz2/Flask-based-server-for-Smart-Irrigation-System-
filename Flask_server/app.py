# L∆∞u √Ω: t√≠nh light intensity t·ª´ ƒë·ªô che ph·ªß m√¢y
# ƒê·ªô che ph·ªß m√¢y (%)	M√¥ t·∫£ th·ªùi ti·∫øt	    ∆Ø·ªõc l∆∞·ª£ng √°nh s√°ng (lux)
# 0‚Äì10%	                Tr·ªùi n·∫Øng g·∫Øt	    ~100,000 lux
# 10‚Äì30%	            N·∫Øng ƒë·∫πp	        ~60,000‚Äì80,000 lux
# 30‚Äì60%	            N·∫Øng d·ªãu, c√≥ m√¢y	~20,000‚Äì50,000 lux
# 60‚Äì90%	            M√¢y nhi·ªÅu, √≠t n·∫Øng	~10,000‚Äì20,000 lux
# 90‚Äì100%	            U √°m, m∆∞a	        ~1,000‚Äì10,000 lux
# => n·ªôi suy ƒë∆°n gi·∫£n
# lux = int(100000 * (1 - cloudiness / 100))

from flask import Flask, request, jsonify
import joblib
import pandas as pd
import requests
import os
import logging
import time
from datetime import datetime
from datetime import timedelta
from sklearn.preprocessing import StandardScaler
from dotenv import load_dotenv
from keras.models import load_model
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from urllib.parse import quote_plus


# os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

app = Flask(__name__)

# C·∫•u h√¨nh ghi log ra file
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
     datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[
        logging.FileHandler("server.log"),
        logging.StreamHandler()
    ],
)
logging.Formatter.converter = lambda *args: time.gmtime(time.time() + 7*3600)

# K·∫øt n·ªëi AI model trong server
model = load_model("models/deep_model.keras")
scaler = joblib.load("models/scaler.pkl")
y_scaler = joblib.load("models/y_scaler.pkl")

OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY") # or "YOUR_API_KEY_HERE"
DEFAULT_LOCATION = {"lat": 10.762622, "lon": 106.660172}  # TP.HCM, VietNam
BLYNK_AUTH_TOKEN = os.getenv("BLYNK_AUTH_TOKEN")

@app.route("/predict", methods=["POST"])
def predict():
    data = request.get_json()

    try:
        # Nh·∫≠n d·ªØ li·ªáu t·ª´ ESP32
        temperature = data.get("temperature")
        soil_moisture = data.get("soil_moisture")
        water_level = data.get("water_level")
        humidity_air = data.get("humidity_air")
        # d√πng int v√¨ dataset ƒë∆∞·ª£c train v·ªõi last_watered_hour l√† int
        last_watered_hour = int(data.get("last_watered_hour"))  # epoch ho·∫∑c ISO string

        if None in (temperature, soil_moisture, water_level, humidity_air, last_watered_hour):
            logging.warning(f"D·ªØ li·ªáu thi·∫øu: {data}")
            blynk_warning(f"D·ªØ li·ªáu thi·∫øu: {data}")
            return jsonify({"error": "Thi·∫øu temperature, soil_moisture, water_level, humidity_air ho·∫∑c last_watered_hour"}), 400

        logging.info(f"üì• Nh·∫≠n t·ª´ ESP32: temp={temperature}, soil={soil_moisture}, water={water_level}, humidity={humidity_air}, last_watered_hour={last_watered_hour}")

        weather_data = get_weather_data()
        if isinstance(weather_data, str) and weather_data == "-1":
            logging.warning("‚ö†Ô∏è D·ª± b√°o th·ªùi ti·∫øt kh√¥ng kh·∫£ d·ª•ng. Tr·∫£ v·ªÅ -1ml.")
            blynk_warning("‚ö†Ô∏è D·ª± b√°o th·ªùi ti·∫øt kh√¥ng kh·∫£ d·ª•ng. Tr·∫£ v·ªÅ -1ml.")
            return str(-1)

        logging.info(f"üå§ D·ªØ li·ªáu th·ªùi ti·∫øt: {weather_data}")

        full_data = {
            "temperature": temperature,
            "soil_moisture": soil_moisture,
            "water_level": water_level,
            "humidity_air": humidity_air,
            "light_intensity": weather_data.get("light_intensity"),
            "time_of_day": weather_data.get("time_of_day"),
            "rain_prediction": weather_data.get("rain_prediction"),
            "last_watered_hour": last_watered_hour
        }

        feature_order = [
            "temperature",
            "soil_moisture",
            "water_level",
            "humidity_air",
            "light_intensity",
            "time_of_day",
            "rain_prediction",
            "last_watered_hour"
        ]

        """
        X·ª≠ l√Ω d·ªØ li·ªáu
        G·ª≠i ƒë·∫øn model ƒë·ªÉ d·ª± ƒëo√°n
        Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho ESP32
        """
        # ƒê·∫£m b·∫£o ƒë√∫ng th·ª© t·ª± c·ªôt
        X_input = pd.DataFrame([full_data])[feature_order]
        X_input.fillna(0, inplace=True)

        # Chu·∫©n h√≥a ƒë·∫ßu v√†o
        input_scaled = scaler.transform(X_input)

        # D·ª± ƒëo√°n
        prediction = model.predict(input_scaled)

        # Gi·∫£i chu·∫©n h√≥a ƒë·∫ßu ra
        predicted_ml = y_scaler.inverse_transform(prediction.reshape(-1, 1))
        result = float(predicted_ml[0][0])
        rounded_result = abs(int(round(result)))  # L√†m tr√≤n v√† l·∫•y tr·ªã tuy·ªát ƒë·ªëi

        
        logging.info(f"‚úÖ D·ª± ƒëo√°n: {rounded_result} ml n∆∞·ªõc")
        print(f"‚úÖ D·ª± ƒëo√°n: {rounded_result} ml n∆∞·ªõc")

        return jsonify(rounded_result)

    except Exception as e:
        print("‚ùå L·ªói server:", e)
        logging.error(f"‚ùå L·ªói server: {str(e)}")
        return jsonify({"error": str(e)}), 500

def get_weather_data():
    try:
        # Retry API 3 l·∫ßn n·∫øu g·∫∑p l·ªói
        session = requests.Session()
        retries = Retry(total=3, backoff_factor=0.5)
        session.mount('http://', HTTPAdapter(max_retries=retries))

        url = f"http://api.openweathermap.org/data/2.5/weather?lat={DEFAULT_LOCATION['lat']}&lon={DEFAULT_LOCATION['lon']}&appid={OPENWEATHER_API_KEY}&units=metric"
        response = requests.get(url, timeout=5)
        
        if response.status_code != 200:
            raise Exception(f"M√£ l·ªói {response.status_code}: {response.text}")

        data = response.json()
        cloudiness = data.get("clouds", {}).get("all", 50)
        estimated_lux = int(100000 * (1 - cloudiness / 100))

        return {
            "light_intensity": estimated_lux,
            "time_of_day": get_time_of_day(),
            "rain_prediction": 1 if "rain" in data else 0
        }

    except Exception as e:
        logging.error(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt, tr·∫£ v·ªÅ -1ml, l·ªói: {e}")
        blynk_warning("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th·ªùi ti·∫øt! Vui l√≤ng ki·ªÉm tra.")
        return str(-1)

# G·ª≠i message c·∫£nh b√°o (chu·ªói string) ƒë·∫øn pin ·∫£o V9 c·ªßa Blynk
def blynk_warning(message):
    encoded_msg = quote_plus(message)
    url = f"https://blynk.cloud/external/api/update?token={BLYNK_AUTH_TOKEN}&V9={encoded_msg}"
    response = requests.get(url, timeout=5)
    if response.status_code != 200:
        raise Exception(f"Blynk V9 update failed: {response.status_code}")

def get_time_of_day():
    now_utc = datetime.utcnow()
    now_vn = now_utc + timedelta(hours=7)
    return now_vn.hour

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000, threaded=True)