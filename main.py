# L∆∞u √Ω: t√≠nh light intensity t·ª´ ƒë·ªô che ph·ªß m√¢y
# ƒê·ªô che ph·ªß m√¢y (%)	M√¥ t·∫£ th·ªùi ti·∫øt	∆Ø·ªõc l∆∞·ª£ng √°nh s√°ng (lux)
# 0‚Äì10%	    Tr·ªùi n·∫Øng g·∫Øt	    ~100,000 lux
# 10‚Äì30%	N·∫Øng ƒë·∫πp	        ~60,000‚Äì80,000 lux
# 30‚Äì60%	N·∫Øng d·ªãu, c√≥ m√¢y	~20,000‚Äì50,000 lux
# 60‚Äì90%	M√¢y nhi·ªÅu, √≠t n·∫Øng	~10,000‚Äì20,000 lux
# 90‚Äì100%	U √°m, m∆∞a	        ~1,000‚Äì10,000 lux
# => n·ªôi suy ƒë∆°n gi·∫£n
# lux = int(100000 * (1 - cloudiness / 100))

from flask import Flask, request, jsonify
import joblib
import numpy as np
import pandas as pd
import requests
import os
import logging
from datetime import datetime, timezone
from sklearn.preprocessing import StandardScaler
from dotenv import load_dotenv
from keras.models import load_model

# os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

app = Flask(__name__)

# C·∫•u h√¨nh ghi log ra file
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("server.log"),
        logging.StreamHandler()  # Ghi ra console (gi√∫p xem d·ªÖ tr√™n Render)
    ]
)

model = load_model("deep_model.keras")
scaler = joblib.load("scaler.pkl")
y_scaler = joblib.load("y_scaler.pkl")

OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY") # or "YOUR_API_KEY_HERE"
DEFAULT_LOCATION = {"lat": 10.762622, "lon": 106.660172}  # TP.HCM

@app.route("/predict", methods=["POST"])
def predict():
    data = request.get_json()

    try:
        # Nh·∫≠n d·ªØ li·ªáu t·ª´ ESP32
        temperature = data.get("temperature")
        soil_moisture = data.get("soil_moisture")
        water_level = data.get("water_level")
        humidity_air = data.get("humidity_air")
        # d√πng int v√¨ dataset ƒë∆∞·ª£c train v·ªõi last_watered_hour l√† int
        last_watered_hour = int(data.get("last_watered_hour"))  # epoch ho·∫∑c ISO string

        if None in (temperature, soil_moisture, water_level, humidity_air, last_watered_hour):
            logging.warning(f"D·ªØ li·ªáu thi·∫øu: {data}")
            return jsonify({"error": "Thi·∫øu temperature, soil_moisture, water_level, humidity_air ho·∫∑c last_watered_hour"}), 400

        logging.info(f"üì• Nh·∫≠n t·ª´ ESP32: temp={temperature}, soil={soil_moisture}, water={water_level}, humidity={humidity_air}, last_watered_hour={last_watered_hour}")

        weather_data = get_weather_data()
        logging.info(f"üå§ D·ªØ li·ªáu th·ªùi ti·∫øt: {weather_data}")

        full_data = {
            "temperature": temperature,
            "soil_moisture": soil_moisture,
            "water_level": water_level,
            "humidity_air": humidity_air,
            "light_intensity": weather_data.get("light_intensity"),
            "time_of_day": weather_data.get("time_of_day"),
            "rain_prediction": weather_data.get("rain_prediction"),
            "last_watered_hour": last_watered_hour
        }

        feature_order = [
            "temperature",
            "soil_moisture",
            "water_level",
            "humidity_air",
            "light_intensity",
            "time_of_day",
            "rain_prediction",
            "last_watered_hour"
        ]

        """
        X·ª≠ l√Ω d·ªØ li·ªáu
        G·ª≠i ƒë·∫øn model ƒë·ªÉ d·ª± ƒëo√°n
        Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho ESP32
        """
        # ƒê·∫£m b·∫£o ƒë√∫ng th·ª© t·ª± c·ªôt
        X_input = pd.DataFrame([full_data])
        X_input.fillna(0, inplace=True)

        # Chu·∫©n h√≥a ƒë·∫ßu v√†o
        input_scaled = scaler.transform(X_input)

        # D·ª± ƒëo√°n
        prediction = model.predict(input_scaled)

        # Gi·∫£i chu·∫©n h√≥a ƒë·∫ßu ra
        predicted_ml = y_scaler.inverse_transform(prediction.reshape(-1, 1))
        result = float(predicted_ml[0][0])

        logging.info(f"‚úÖ D·ª± ƒëo√°n: {result:.2f} ml n∆∞·ªõc")
        print(f"‚úÖ D·ª± ƒëo√°n: {result:.2f} ml n∆∞·ªõc")

        return jsonify(result)

    except Exception as e:
        print("‚ùå L·ªói server:", e)
        return jsonify({"error": str(e)}), 500


def get_weather_data():
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?lat={DEFAULT_LOCATION['lat']}&lon={DEFAULT_LOCATION['lon']}&appid={OPENWEATHER_API_KEY}&units=metric"
        response = requests.get(url)
        if response.status_code != 200:
            raise Exception("Kh√¥ng g·ªçi ƒë∆∞·ª£c OpenWeather")

        data = response.json()
        cloudiness = data.get("clouds", {}).get("all", 50)
        estimated_lux = int(100000 * (1 - cloudiness / 100))

        return {
            "light_intensity": estimated_lux,
            "time_of_day": get_time_of_day(),
            "rain_prediction": 1 if "rain" in data else 0
        }

    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt: {e}")
        print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt:", e)
        print("V√¨ kh√¥ng th·ªÉ connect ƒë∆∞·ª£c API OpenWeather, ta gi·∫£ ƒë·ªãnh tr·ªùi c√≥ m√¢y, kh√¥ng m∆∞a v√† l·∫•y th·ªùi gian ƒë∆∞·ª£c l∆∞u tr√™n m·∫°ch l√†m chu·∫©n.")
        return {
            "light_intensity": 20000, # gi·∫£ ƒë·ªãnh c√≥ m√¢y
            "time_of_day": get_time_of_day(),
            "rain_prediction": 0
        }

def get_time_of_day():
    now = datetime.utcnow().hour + 7  # gi·ªù VN
    return now % 24

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)